file for the GNOKII tool suite.
dnl
dnl  Copyright (C) 1999 Hugh Blemings & Pavel Janík ml.
dnl                2000 Karel Zak, Pawe³ Kot
dnl                2002 BORBELY Zoltan
dnl
dnl  $Id: configure.in,v 1.161 2006-11-01 20:38:57 pkot Exp $
dnl

AC_INIT(gnokii/gnokii.c)

AC_CONFIG_AUX_DIR(config)

AC_CANONICAL_SYSTEM
AC_PREFIX_DEFAULT("/usr/local")

dnl ======================== Checks for programs.
AC_PROG_CC
AC_PROG_CPP

dnl -----------------------------
dnl Checks for FreeBSD Build
dnl -----------------------------
AC_MSG_CHECKING(if building on FreeBSD)

if test `uname -s` = "FreeBSD" ; then
	AC_MSG_RESULT(yes)
	CPPFLAGS="$CFLAGS -I/usr/local/include"
	LDFLAGS="$LDFLAGS -L/usr/local/lib"
else
	AC_MSG_RESULT(no)
fi

AC_GNU_SOURCE

AC_PROG_LEX
AC_PATH_PROG(RM, rm, no)
AC_PATH_PROG(FIND, find, no)
AC_CHECK_PROGS(MAKE, gmake make)
AC_CHECK_PROGS(AR, ar)
AC_LIBTOOL_WIN32_DLL
define([AC_PROVIDE_AC_LIBTOOL_WIN32_DLL])
AC_PROG_LIBTOOL
AC_PROG_INSTALL

AC_RELOCATABLE

AM_ICONV

dnl ======================== Default setting
ALL_LINGUAS="cs de et fi nl sk pl it sl fr zh_CN sv"
AC_CHECK_HEADERS(libintl.h)
AM_GNU_GETTEXT([no-libtool])
AC_CHECK_FUNCS(locale_charset)
if test x$am_cv_langinfo_codeset != xyes -a x$ac_cv_func_locale_charset != xyes ; then
	NEED_LOCALE_CHARSET=1
fi
# if msgfmt or xgettext is not present on the system, disable nls build
if test "$MSGFMT" = ":" -o "$XGETTEXT" = ":"; then
	USE_NLS="no"
fi

dnl ======================== Check for include/config.h.in
AC_MSG_CHECKING([for include/config.h.in])
if test -f include/config.h.in; then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
	echo '*************************************************'
	echo 'include/config.h.in missing, run autoheader first'
	echo 'autoheader is part of the autoconf package'
	echo '*************************************************'
	exit 1
fi

dnl Let us have $prefix variable aviable here
test x"$prefix" = xNONE && prefix="$ac_default_prefix"

debug="yes"
xdebug="yes"
rlpdebug="yes"

AC_ARG_ENABLE(fulldebug, 
	[  --enable-fulldebug      compile with full debugging support],
	[ if test x$enable_fulldebug = xyes; then
		if test "x$GCC" = "xyes"; then
			CFLAGS="$CFLAGS -ggdb3 -Wall"
		fi
	  fi ]
)

AC_ARG_ENABLE(debug, 
	[  --enable-debug          compile with debug code],
	[ if test x$enable_debug = xno; then debug="no"; fi ],
	[ debug="yes" ]
)

AC_ARG_ENABLE(xdebug,
	[  --enable-xdebug         compile with xdebug code],
	[ if test x$enable_xdebug = xno; then xdebug="no"; fi ],
	[ xdebug="yes" ]
)

AC_ARG_ENABLE(rlpdebug,
	[  --enable-rlpdebug       compile with RLP debug code],
	[ if test x$enable_rlpdebug = xno; then rlpdebug="no"; fi ],
	[ rlpdebug="yes" ]
)

if test $debug = "yes"; then
	AC_DEFINE(DEBUG)
fi
if test $xdebug = "yes"; then
	AC_DEFINE(XDEBUG)
fi
if test $rlpdebug = "yes"; then
	AC_DEFINE(RLP_DEBUG)
fi

dnl ======================== Set gcc CFLAGS if we use gcc
if test "x$GCC" = "xyes"; then
	CFLAGS="$CFLAGS -Wall"
fi

dnl ======================== Set some gcc CFLAGS to reduce build warnings
if test "x$GCC" = "xyes"; then
  OLD_CFLAGS="$CFLAGS"

  CFLAGS="-Wno-pointer-sign"
  AC_MSG_CHECKING(if gcc supports $CFLAGS compiler option)
  AC_TRY_COMPILE( [], [ int main() { return 0; } ],
		ac_cv_have_no_pointer_sign=yes,
		ac_cv_have_no_pointer_sign=no)
  AC_MSG_RESULT($ac_cv_have_no_pointer_sign)
  CFLAGS="-fvisibility=hidden"
  AC_MSG_CHECKING(if gcc supports $CFLAGS compiler option)
  AC_TRY_COMPILE( [], [ int main() { return 0; } ],
		ac_cv_have_hidden_visibility=yes,
		ac_cv_have_hidden_visibility=no)
  AC_MSG_RESULT($ac_cv_have_hidden_visibility)

  CFLAGS="$OLD_CFLAGS"
  if test $ac_cv_have_no_pointer_sign = yes; then
    CFLAGS="$CFLAGS -Wno-pointer-sign"
  fi
  if test $ac_cv_have_hidden_visibility = yes; then
    CFLAGS="$CFLAGS -fvisibility=hidden"
  fi
fi

dnl ======================== avoid deprecated warnings here
# CFLAGS="$CFLAGS -DGNOKII_DEPRECATED=''"

dnl ======================== Checks for libraries.

AC_ARG_WITH(libpthread,
   [  --with-libpthread=DIR   specifies the base libpthread],
   [ if test x$withval = xyes
     then
      AC_MSG_WARN(Usage is: --with-libpthread=DIR)
     else
      PTHREAD_LIBS="-L$withval/lib/"
      PTHREAD_CFLAGS="-I$withval/include/"
     fi
   ]
)

ACX_PTHREAD
if test "x$PTHREAD_CFLAGS" = "x-pthread"; then
	PTHREAD_LIBS="$PTHREAD_LIBS -pthread"
fi

dnl FIXME: do we really test here if libc contains this function?
if test "x$PTHREAD_LIBS" = xerror; then
   AC_CHECK_FUNC(pthread_attr_init, PTHREAD_LIBS="",
      [AC_MSG_WARN(not found library: pthread!!!)
       AC_MSG_WARN(disabling xgnokii and smsd)])
fi

AC_CACHE_CHECK(for tm_gmtoff in struct tm, ac_cv_have_tm_gmtoff,
	[AC_TRY_COMPILE([#include <time.h>],
		[struct tm t; t.tm_gmtoff = 0],
		ac_cv_have_tm_gmtoff=yes,
		ac_cv_have_tm_gmtoff=no)])
if test $ac_cv_have_tm_gmtoff = yes; then
	AC_DEFINE(HAVE_TM_GMTON)
fi

AC_CACHE_CHECK(for timer operations, ac_cv_have_timeops,
	[AC_TRY_LINK([#include <sys/time.h>],
		[struct timeval tv; timerisset(&tv); timerclear(&tv); timercmp(&tv, &tv, <); timeradd(&tv, &tv, &tv); timersub(&tv, &tv, &tv); ],
		ac_cv_have_timeops=yes,
		ac_cv_have_timeops=no)])
if test $ac_cv_have_timeops = yes; then
        AC_DEFINE(HAVE_TIMEOPS)
fi

have_termios="no"
dnl Checking for setspeed in termios.h
AC_CACHE_CHECK(for cfsetspeed in termios.h, ac_cv_have_cfsetspeed,
	[AC_TRY_LINK([#include <termios.h>],
		[struct termios t; cfsetspeed(&t, B9600);],
		ac_cv_have_cfsetspeed=yes,
		ac_cv_have_cfsetspeed=no)])
if test $ac_cv_have_cfsetspeed = yes; then
        AC_DEFINE(HAVE_CFSETSPEED)
        have_termios="yes"
fi

if test $have_termios = "no"; then
	AC_CACHE_CHECK(for cfsetispeed and cfsetospeed in termios.h, ac_cv_have_cfsetiospeed,
		[AC_TRY_LINK([#include <termios.h>],
			[struct termios t; cfsetispeed(&t, B9600);  cfsetospeed(&t, B9600);],
			ac_cv_have_cfsetiospeed=yes,
			ac_cv_have_cfsetiospeed=no)])
	if test $ac_cv_have_cfsetiospeed = yes; then
		AC_DEFINE(HAVE_CFSETISPEED)
		AC_DEFINE(HAVE_CFSETOSPEED)
		have_termios="yes"
	fi
fi

if test $have_termios = "no"; then
	AC_CACHE_CHECK(for c_ispeed and c_ospeed in struct termios, ac_cv_have_c_iospeed,
		[AC_TRY_COMPILE([#include <termios.h>],
			[struct termios t; t.c_iflag = B9600; t.c_oflag = B9600;],
			ac_cv_have_c_iospeed=yes,
			ac_cv_have_c_iospeed=yes)])
	if test ac_cv_have_c_iospeed = yes; then
		AC_DEFINE(HAVE_TERMIOS_CSPEED)
	fi
fi

dnl ======================== Checks for getopt_long support

AC_CHECK_HEADER(getopt.h, ,
      [CFLAGS="$CFLAGS -I../getopt"])

AC_ARG_WITH(gnugetopt,
   [  --with-gnugetopt=DIR    specifies the getopt library location directory],
   [ if test x$withval=xyes; then
        AC_MSG_WARN(Usage is: --with-gnugetopt=DIR)
     else
        GETOPT_LIBS="-L$withval"
     fi
   ]
)

OWN_GETOPT=""
AC_CHECK_FUNC(getopt_long, , [
        LIBS="$LIBS $GETOPT_LIBS"
           AC_CHECK_LIB(gnugetopt, getopt_long, LIBS="$LIBS -lgnugetopt",
            OWN_GETOPT="1")])

dnl ======================== Check for libical
AC_ARG_WITH(libical,
   [  --with-libical=DIR      specifies the base libical],
   [ if test x$withval = xyes
     then
      AC_MSG_WARN(Usage is: --with-libical=DIR)
     else
      ICAL_LIBS="-L$withval/lib/"
      ICAL_CFLAGS="-I$withval/include/"
     fi
   ]
)

USE_LIBICAL="no"
AC_ARG_ENABLE(libical,
       	      AC_HELP_STRING([--enable-libical],
               	             [enable libical support (default is autodetected)]
                            ),,
       	      [enable_libical=yes])

if test "$enable_libical" == "yes"; then
	OLD_CFLAGS="$CFLAGS"
	LIBS="$LIBS $ICAL_LIBS -lpthread -lical"
	CFLAGS="$CFLAGS $ICAL_CFLAGS"
	AC_MSG_CHECKING(whether libical is installed)
	AC_TRY_LINK([
	   #include <ical.h>
	   ],[
	   int priority;
	   icalcomponent *pIcal=NULL;
	   struct icaltimetype atime = icaltime_from_string("20031231T223000");

	   pIcal = icalcomponent_vanew(
	      ICAL_VCALENDAR_COMPONENT,
	      icalproperty_new_version("2.0"),
	      icalproperty_new_prodid("//Gnokii.org//NONSGML v.0.5.8"),
	      0
	   );
	   atime.is_daylight = 1;
	   priority = icalproperty_get_priority(icalcomponent_get_first_property(pIcal, ICAL_PRIORITY_PROPERTY));
	   ],
	   [
	      AC_MSG_RESULT(yes)
	      USE_LIBICAL="yes"
	      AC_DEFINE([HAVE_LIBICAL],[1],[Use libical])
	   ],
	   [
	      AC_MSG_RESULT(no)
	      LIBS="$OLD_LIBS"
	      CFLAGS="$OLD_CFLAGS"
	   ]
	)
fi

dnl ======================== Check for libusb
USE_LIBUSB="no"
AC_ARG_ENABLE(libusb,
              AC_HELP_STRING([--enable-libusb],
                             [enable libusb support (default is autodetected)]
                            ),,
              [enable_libusb=yes])
if test "$enable_libusb" == "yes"; then
	AC_TRY_COMPILE([#include <usb.h>],
		[struct usb_dev_handle *dev;],
		[
			AC_MSG_RESULT(yes)
			AC_DEFINE([HAVE_LIBUSB],[1],[Use libusb])
			USE_LIBUSB="yes"
			LIBS="$LIBS -lusb"
		],
		[
			AC_MSG_RESULT(no)
		]
	)
fi

dnl ======================== Checks for gethostbyname support
AC_CHECK_FUNC(gethostbyname, ,
	AC_CHECK_LIB(nsl, gethostbyname, LIBS="$LIBS -lnsl"))

dnl ======================== Checks for Linux IrDA support
USE_IRDA="no"
AC_CHECK_HEADER(linux/irda.h,
	[AC_DEFINE(HAVE_IRDA)
	 USE_IRDA="yes"],,
	[#include <sys/socket.h>
	 #include <sys/ioctl.h>
	 #include <linux/types.h>])

dnl ======================== Checks for Linux Bluetooth support
bluetooth="no"
AC_ARG_WITH(bluetooth,
	[  --with-bluetooth=DIR    specifies the base libbluetooth],
	[ if test x$withval = xyes; then
		AC_MSG_WARN(Usage is: --with-bluetooth=DIR)
	  else
		LIBS="$LIBS -L$withval/lib"
		CFLAGS="$CFLAGS -I$withval/net -I$withval/"
	  fi
	]
)

AC_MSG_CHECKING([for the bluetooth support])
echo
AC_CACHE_CHECK(for the struct sockaddr_rc in <bluetooth/rfcomm.h>, ac_cv_have_sockaddr_rc,
	[AC_TRY_COMPILE([#include <sys/socket.h>
			#include <bluetooth/bluetooth.h>
			#include <bluetooth/rfcomm.h>],
		[struct sockaddr_rc rc;],
		ac_cv_have_sockaddr_rc=yes,
		ac_cv_have_sockaddr_rc=no)])
USE_BLUETOOTH="no"
if test $ac_cv_have_sockaddr_rc = yes; then
	AC_DEFINE(HAVE_BLUETOOTH)
	AC_DEFINE(HAVE_BLUETOOTH_BLUEZ,[],[Compile on Linux])
	USE_BLUETOOTH="yes"
	LIBS="$LIBS -lbluetooth"
fi


dnl ======================== Checks for MacOSX Bluetooth support

AC_MSG_CHECKING([for the MacOS X bluetooth support])
echo
AC_CHECK_HEADERS(CoreFoundation/CoreFoundation.h)
AC_CHECK_HEADERS(IOBluetooth/Bluetooth.h)
AC_CHECK_HEADERS(IOBluetooth/IOBluetoothUserLib.h)
AC_TRY_COMPILE([#include <CoreFoundation/CoreFoundation.h>
			#include <IOBluetooth/Bluetooth.h>
			#include <IOBluetooth/IOBluetoothUserLib.h>],

			[CFStringRef strDevice;
			strDevice = CFStringCreateWithCString(NULL, NULL, NULL);
			IOBluetoothNSStringToDeviceAddress(NULL, NULL);],

		ac_cv_have_iobluetooth=yes,
		ac_cv_have_iobluetooth=no)

if test $ac_cv_have_iobluetooth = yes; then
	AC_DEFINE(HAVE_BLUETOOTH)
	AC_DEFINE(HAVE_BLUETOOTH_MACOSX,[],[Compile on Darwin / Mac OSX])
	USE_BLUETOOTH="yes"
	LIBS="$LIBS $PTHREAD_LIBS -framework CoreFoundation -framework IOBluetooth -framework Foundation"
fi


dnl ======================== Checks for FreeBSD/netgraph Bluetooth support

AC_MSG_CHECKING([for the FreeBSD/netgraph bluetooth support])
echo
AC_CACHE_CHECK(for the struct sockaddr_rfcomm in <netgraph/.../ng_btsocket.h>, ac_cv_have_sockaddr_rfcomm,
	[AC_TRY_COMPILE([#include <sys/types.h>
			#include <sys/socket.h>
			#include <bitstring.h>
			#include <netgraph/bluetooth/include/ng_hci.h>
			#include <netgraph/bluetooth/include/ng_l2cap.h>
			#include <netgraph/bluetooth/include/ng_btsocket.h>],
		[struct sockaddr_rfcomm rc;],
		ac_cv_have_sockaddr_rfcomm=yes,
		ac_cv_have_sockaddr_rfcomm=no)])

if test $ac_cv_have_sockaddr_rfcomm = yes; then
	AC_DEFINE(HAVE_BLUETOOTH)
	AC_DEFINE(HAVE_BLUETOOTH_NETGRAPH,[],[Compile on FreeBSD])
	USE_BLUETOOTH="yes"
	AC_CHECK_LIB(bluetooth, bt_aton,
		    [LIBS="$LIBS -lbluetooth" AC_DEFINE(HAVE_BT_ATON,[],[Define to 1 if you have the \`bt_aton' function.])])
fi


dnl ======================== Checks for X base support

if test "$no_x" = yes -o "$with_x" = "no"; then
   x_support="no"
   XPM_CFLAGS=""
   XPM_LIBS=""
   GTK_CFLAGS=""
   GTK_LIBS=""
else
   AC_PATH_X
   if test "x$x_includes" != "x"; then
      XINCL="-I$x_includes"
   else
      XINCL=""
   fi
   CPPFLAGS="$CPPFLAGS $XINCL"
   AC_CHECK_HEADERS(X11/xpm.h)

   if test "x$x_libraries" = "xNONE"; then
      x_support="no"
      XPM_CFLAGS=""
      XPM_LIBS=""
      GTK_CFLAGS=""
      GTK_LIBS=""
      AC_MSG_WARN(Cannot find library libX11.)
      AC_MSG_WARN(Disabling xgnokii.)
   else
      AC_CHECK_LIB(Xpm, XpmWriteFileFromXpmImage,
            [ XPM_CFLAGS="$XINCL" XPM_LIBS="-L$x_libraries -lXpm -lX11"
              AC_DEFINE(XPM) ],
            AC_MSG_WARN(Cannot found library libXpm - disabling XPM support.),
            [ -L$x_libraries -lX11 ]
      )

      if test "x$PTHREAD_LIBS" = xerror; then
         x_support="no"
         GTK_CFLAGS=""
         GTK_LIBS=""
      else
         PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.0, found_gtk=yes, found_gtk=no)
         if test "$found_gtk" = no; then
            x_support="no"
            GTK_CFLAGS=""
            GTK_LIBS=""
            AC_MSG_WARN(Cannot find GTK+ 2.0.)
            AC_MSG_WARN(Disabling xgnokii.)
         else
            x_support="yes"

            XGNOKIIDIR='${prefix}'
            AC_ARG_WITH(xgnokiidir,
               [  --with-xgnokiidir=DIR   specifies the base for xgnokii],
               [ if test x$withval = xyes; then
                    AC_MSG_WARN(Usage is: --with-xgnokiilib=DIR)
                 else
                    XGNOKIIDIR="$withval"
                 fi
               ]
            )
         fi
      fi
   fi
fi

dnl ======================== Check for libsocket
AC_CHECK_LIB(socket, socket)

dnl ======================== Additional switches

AC_ARG_ENABLE(security,
   [  --enable-security       enable all security features ],
   [ if test x$enable_security = xyes; then
	AC_DEFINE(SECURITY)
     	security="yes"
     else
	security="no"
     fi ],
   [ security="no"  ]
)

dnl LIBTOOL check handles --enable-shared/--disable-shared
if test x$enable_shared = xyes ; then
	shared="yes"
else
	shared="no"
fi
if test x$enable_static = xyes ; then
	static="yes"
else
	static="no"
fi

AC_ARG_ENABLE(win32,
   [  --enable-win32          if you want win32 suport ],
   [ if test x$enable_win32 = xyes; then
	AC_DEFINE(WIN32)
	WIN32=1
	if test x$cross_compiling = xyes; then
		AC_DEFINE(WIN32_CROSS, 1, [Define if you cross compile win32.])
		WIN32_CROSS=1
		win32="cross"
	else
 		win32="yes"
	fi
	AC_CHECK_HEADER(af_irda.h, [AC_DEFINE(HAVE_IRDA) USE_IRDA="yes"])
     else
	win32="no"
     fi ],
   [ win32="no"]
)

AC_ARG_ENABLE(unix98test,
   [  --enable-unix98test     if you want to disable UNIX98 test and assume to use it
                          default is enabled],
   [ if test x$enable_unix98test = xno; then
	unix98test="no"
        AC_DEFINE(USE_UNIX98PTYS)
     else
	unix98test="yes"
     fi ],
   [ unix98test="yes"]
)

if test x$unix98test = xyes; then

AC_CHECK_FUNC(grantpt,
   [ AC_TRY_RUN([
#define  _XOPEN_SOURCE 500

#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

int main()
{
	char *name = NULL;
        int master, err;

        master = open("/dev/ptmx", O_RDWR | O_NOCTTY | O_NONBLOCK);
        if (master >= 0) {
                err = grantpt(master);
                err = err || unlockpt(master);
                if (!err) {
                        name = ptsname(master);
                } else {
                        exit(-1);
                }
        } else {
		exit(-1);
	}
	close(master);
	exit(0);
}
                ],
                AC_DEFINE(USE_UNIX98PTYS),
                AC_MSG_WARN("No unix98ptys"),
		AC_DEFINE(USE_UNIX98PTYS))
   ]
)

fi

AC_TRY_COMPILE( [#define _XOPEN_SOURCE 500
		 #include <sys/types.h>
		 #include <sys/socket.h>],
		[struct msghdr msg; msg.msg_control;],
		AC_DEFINE(HAVE_MSGHDR_MSG_CONTROL)
)

dnl ======================== Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h sys/file.h)
AC_CHECK_HEADERS(string.h strings.h ctype.h stdlib.h stdarg.h stdint.h)
AC_CHECK_HEADERS(stddef.h sys/socket.h sys/modem.h termios.h sys/filio.h)
AC_CHECK_HEADERS(inttypes.h wchar.h direct.h)

dnl ======================== Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_CACHE_CHECK(for long long, ac_cv_c_long_long,
	[AC_TRY_RUN([int main() { long long foo = 0; exit(sizeof(long long) < sizeof(long)); }],
		ac_cv_c_long_long=yes, ac_cv_c_long_long=no, ac_cv_c_long_long=no)])
if test $ac_cv_c_long_long = yes; then
	AC_DEFINE(HAVE_LONG_LONG)
fi
AC_CACHE_CHECK(for long double, ac_cv_c_long_double,
	[AC_TRY_RUN([int main() { long double foo = 0.0; exit(sizeof(long double) < sizeof(double)); }],
		ac_cv_c_long_double=yes, ac_cv_c_long_double=no, ac_cv_c_long_double=no)])
if test $ac_cv_c_long_double = yes; then
	AC_DEFINE(HAVE_LONG_DOUBLE, 1, [Define if your compiler supports the \`long double' type.])
fi

AC_CACHE_CHECK(for __ptr_t, ac_cv_c___ptr_t,
	[AC_TRY_COMPILE([#include <stdio.h>],
		[__ptr_t foo = NULL;],
		ac_cv_c___ptr_t=yes, ac_cv_c___ptr_t=no)])
if test $ac_cv_c___ptr_t = yes; then
	AC_DEFINE(HAVE_PTR_T, 1)
fi

dnl ======================== Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(mktime timegm gettimeofday select poll wcrtomb)
AC_CHECK_FUNCS(strchr strdup strstr strtol strtok strsep asprintf vasprintf)
AC_CHECK_FUNCS(snprintf vsnprintf)
AC_CACHE_CHECK(for ISO C99 compliant snprintf,ac_cv_func_snprintf_c99,
	[AC_TRY_RUN([
#include <stdio.h>

int main()
{
	char buf[] = {0, 0, 0, 0};

	snprintf(buf, 3, "ABC");
	exit ((buf[2] != 0) || (snprintf(NULL, 0, "%d", 100) != 3));
}],ac_cv_func_snprintf_c99=yes,ac_cv_func_snprintf_c99=no,ac_cv_func_snprintf_c99=no)])
if test $ac_cv_func_snprintf_c99 = yes; then
	AC_DEFINE(HAVE_C99_SNPRINTF)
fi
AC_CACHE_CHECK(for ISO C99 compliant vsnprintf,ac_cv_func_vsnprintf_c99,
	[AC_TRY_RUN([
#include <stdio.h>
#include <stdarg.h>

int doit(char *buf, int len, const char *s, ...)
{
	va_list ap;
	int r;

	va_start(ap, s);
	r = vsnprintf(buf, len, s, ap);
	va_end(ap);

	return r;
}

int main()
{
	char buf[] = {0, 0, 0, 0};

	doit(buf, 3, "ABC");
	exit ((buf[2] != 0) || (doit(NULL, 0, "%d", 100) != 3));
}],ac_cv_func_vsnprintf_c99=yes,ac_cv_func_vsnprintf_c99=no,ac_cv_func_vsnprintf_c99=no)])
if test $ac_cv_func_vsnprintf_c99 = yes; then
	AC_DEFINE(HAVE_C99_VSNPRINTF)
fi

CFLAGS="$CFLAGS $NLS_CFLAGS"
LIBS="$LIBS $NLS_LIBS"

PACKAGE=gnokii
XPACKAGE=xgnokii
VERSION=`cat VERSION`
XVERSION=`cat xgnokii/VERSION`
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_DEFINE_UNQUOTED(XVERSION, "$XVERSION")
if test "$x_support" = yes; then
	AC_DEFINE_UNQUOTED(XGNOKIIDIR, "`eval echo $XGNOKIIDIR`")
fi
HAVE_XGNOKII=$x_support

case "$INSTALL" in
  'config/install-sh -c') INSTALL=`pwd`/$INSTALL
   ;;
esac

SHELL=${CONFIG_SHELL-/bin/sh}

AC_SUBST(SHELL)
case "$build_os" in
  solaris*) SHELL=/bin/ksh
   ;;
esac

AC_CONFIG_HEADER(include/config.h)

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
AC_SUBST(XVERSION)
AC_SUBST(XPACKAGE)

AC_SUBST(XGNOKIIDIR)
AC_SUBST(exec_prefix)

AC_SUBST(GLDFLAGS)

AC_SUBST(PTHREAD_CFLAGS)
AC_SUBST(PTHREAD_LIBS)

AC_SUBST(OWN_GETOPT)
AC_SUBST(USE_UNIX98PTYS)
AC_SUBST(NEED_LOCALE_CHARSET)

AC_SUBST(LIBS)

AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(XPM_CFLAGS)
AC_SUBST(XPM_LIBS)
AC_SUBST(HAVE_XGNOKII)
AC_SUBST(WIN32)
AC_SUBST(WIN32_CROSS)

AC_SUBST(HAVE_LIBICAL)
AC_SUBST(HAVE_LIBUSB)

AC_OUTPUT(
   Makefile.global
   intl/Makefile
   po/Makefile.in
   packaging/RedHat/gnokii.spec
   packaging/Slackware/SlackBuild
   packaging/Slackware/SlackBuild-xgnokii
   common/gnokii.pc
   xgnokii/xgnokii.pc
   )


dnl ======================== Final report

echo "

  G N O K I I

  A Linux/Unix toolset and driver for Nokia mobile phones.

  Copyright (C) 1999-2002  The Gnokii Development Team.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  See file COPYING for more details.

    Host system:        $host_os
    Gnokii version:     $VERSION
    Xgnokii version:    $XVERSION
    X (GTK) support:    $x_support
    Debug:              $debug
    XDebug:             $xdebug
    RLPDebug:           $rlpdebug
    NLS:                $USE_NLS
    IrDA:               $USE_IRDA
    ical read support:  $USE_LIBICAL
    Bluetooth:          $USE_BLUETOOTH
    libusb support:     $USE_LIBUSB
    Security:           $security
    Build Shared Lib:   $shared
    Build Static Lib:   $static
    Win32:              $win32 
    Prefix:             $prefix

  Type '${MAKE}' for compilation and then '${MAKE} install',
  '${MAKE} install-suid', '${MAKE} install-strip' or '${MAKE} install-ss' to
  install gnokii. If you wish to install gnokii sgid gnokii (install-suid or
  install-ss) be sure to have 'gnokii' group in your system.
"
