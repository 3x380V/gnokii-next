/*

  $Id: vcal.lx,v 1.4 2002-07-29 10:29:12 plail Exp $

  G N O K I I

  A Linux/Unix toolset and driver for Nokia mobile phones.

  This file is part of gnokii.

  Gnokii is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  Gnokii is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with gnokii; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  Copyright (C) 1999-2000  Hugh Blemings & Pavel Janík ml.

*/

%{
#include <string.h>

#include "gsm-common.h"
#include "gsm-filetypes.h"

#define YY_DECL int yylex(char *type, char *text, char *desc, char *time, char *alarm, char *todo_priority, int lexnumber)
int veventcounter = 0, vtodocounter = 0;

%}

%x vcalendar
%x vevent
%x vtodo
%x category
%x summary
%x todosummary
%x description
%x ttime
%x aalarm
%x priority
%option noyywrap
%option nounput

%%

BEGIN:VCALENDAR				BEGIN(vcalendar);

<vcalendar>BEGIN:VEVENT			++veventcounter; BEGIN(vevent);

<vcalendar>BEGIN:VTODO			++vtodocounter; BEGIN(vtodo);

<vtodo>SUMMARY:				BEGIN(todosummary);

<todosummary>[[:alnum:] ]+		{
						if(vtodocounter == lexnumber)
							strncpy(text, yytext, 256);
						BEGIN(vtodo);
					}

<vtodo>PRIORITY:			BEGIN(priority);

<priority>[0-9]{1}			{
						if(vtodocounter == lexnumber)
							strncpy(todo_priority, yytext, 1);
						BEGIN(vtodo);
					}

<vevent>CATEGORIES:			BEGIN(category);

<category>[[:alnum:] ]+			{
						if(veventcounter == lexnumber)
							strncpy(type, yytext, 21);
						BEGIN(vevent);
					}

<vevent>SUMMARY:			BEGIN(summary);

<summary>[[:alnum:] ]+			{
						if(veventcounter == lexnumber)
							strncpy(text, yytext, 256);
						BEGIN(vevent);
					}

<vevent>DESCRIPTION:			BEGIN(description);

<description>[[:alnum:] ]+		{
						if(veventcounter == lexnumber)
							strncpy(desc, yytext, 256);
						BEGIN(vevent);
					}

<vevent>DTSTART:			BEGIN(ttime);

<ttime>[0-9]{8}T[0-9]{6}		{
						if(veventcounter == lexnumber)
							strncpy(time, yytext, 16);
						BEGIN(vevent);
					}

<vevent>AALARM:				BEGIN(aalarm);

<aalarm>[0-9]{8}T[0-9]{6}		{
						if(veventcounter == lexnumber)
							strncpy(alarm, yytext, 16);
						BEGIN(vevent);
					}


<vevent>END:VEVENT			BEGIN(vcalendar);

<vcalendar>END:VCALENDAR		BEGIN(0);
<*>.|\n
<*><<EOF>>				{
	                                        if (((lexnumber > 0) && (lexnumber < veventcounter + 1)) ||
						    ((lexnumber > 0) && (lexnumber < vtodocounter + 1)))
						{
							return 0;
						}
						fprintf(stderr, "Error: Invalid calendar note number!\n");
						return -1;
					}

%%

/**
* GetvCalTime
*
* Fills vCalendar time string into GSM_DateTime structure
*
* in:
*   dt:  datetime structure
*   time:  string in format yyyymmddThhmmss
* out:
*   <>0 if error
*/
int GetvCalTime(GSM_DateTime *dt, char *time)
{
	char year[5] = "", month[3] = "", day[3] = "", hour[3] = "", minute[3] = "", second[3] = "";
	dt->Year = dt->Month = dt->Day = dt->Hour = dt->Minute = dt->Second = dt->Timezone = 0;

	strncpy(year, time, 4);
	strncpy(month, time + 4, 2);
	strncpy(day, time + 6, 2);
	strncpy(hour, time + 9, 2);
	strncpy(minute, time + 11, 2);
	strncpy(second, time + 13, 2);

	/* FIXME: Should check ranges... */
	dt->Year = atoi(year);
	dt->Month = atoi(month);
	dt->Day = atoi(day);
	dt->Hour = atoi(hour);
	dt->Minute = atoi(minute);
	dt->Second = atoi(second);
	/* FIXME */
	dt->Timezone = 0;

	return 0;
}

/**
* FillCalendarNote
*
* Fills calendar data from strings into calendar note
*
* in:
*   note:  calendar note structure
*   type:  type of calendar note
*   text:  text or phonenumber
*   time:  string in format yyyymmddThhmmss
*   alarm: dito
* out:
*   <>0 if error
*/
int FillCalendarNote(GSM_CalendarNote *note, char *type,
			char *text, char *desc, char *time, char *alarm)
{

	GetvCalTime(&note->Time, time);
	GetvCalTime(&note->Alarm, alarm);

	note->Location = 0;

	strncpy(note->Text, text, 256);
	strcpy(note->Phone, ""); /* correct in most cases */

	/* FIXME: Handle additional strings, maybee from configuration file */
	if (!strcmp(type, "PHONE CALL")) {
		strncpy(note->Phone, text, 48);
		if (desc[0] != 0) strncpy(note->Text, desc, 256);
		note->Type = GCN_CALL;
	} else if (!strcmp(type, "MEETING"))
		note->Type = GCN_MEETING;
	else if (!strcmp(type, "SPECIAL OCASSION"))
		note->Type = GCN_BIRTHDAY;
	else
		note->Type = GCN_REMINDER;

	return 0;
}

/**
* GSM_ReadVCalendarFileEvent
*
* Reads vCalendar file and parses VEVENT entries
*
* in:
*   FileName: name of vCalendar file
*   cnote:  pointer to calendar note
*   number:  number in file of calendar note to read
* out:
*   <>0 if error
*/
int GSM_ReadVCalendarFileEvent(char *FileName, GSM_CalendarNote *cnote, int number)
{
	FILE *file;
	char type[21] = "", text[257] = "", desc[257] = "", time[16] = "", alarm[16] = "", todo_priority[2] = "";

	file = fopen(FileName, "r");
	if (!file) {
		fprintf(stderr, _("File cannot be opened!\n"));
		return -1;
	}

	yyin = file;

	if (yylex(type, text, desc, time, alarm, todo_priority, number)) {
		fprintf(stderr, _("Error parsing vCalendar file!\n"));
		return -1;
	}
	FillCalendarNote(cnote, type, text, desc, time, alarm);

	fclose(file);
	return 0;
}

/**
* FillToDo
*
* Fills todo data from strings into ToDo
*
* in:
*   note:  todo structure
*   text:  text or phonenumber
*   priority:  1 (highest) - 3 (lowest)
* out:
*   <>0 if error
*/
int FillToDo(GSM_ToDo *note, char *text, char *todo_priority)
{
	note->Location = 0;

	strncpy(note->Text, text, 256);
	note->Priority = 2;
	if (todo_priority) note->Priority = atoi(todo_priority);
	return 0;
}

/**
* GSM_ReadVCalendarFileTodo
*
* Reads vCalendar file and parses VTODO entries
*
* in:
*   FileName: name of vCalendar file
*   ctodo:  pointer to calendar note
*   number:  number in file of calendar note to read
* out:
*   <>0 if error
*/
int GSM_ReadVCalendarFileTodo(char *FileName, GSM_ToDo *ctodo, int number)
{
	FILE *file;
	char type[21] = "", text[258] = "", desc[258] = "", time[16] = "", alarm[16] = "", todo_priority[3] = "";

	file = fopen(FileName, "r");
	if (!file) {
		fprintf(stderr, _("File cannot be opened!\n"));
		return -1;
	}

	yyin = file;

	if (yylex(type, text, desc, time, alarm, todo_priority, number)) {
		fprintf(stderr, _("Error parsing vCalendar file!\n"));
		return -1;
	}
	FillToDo(ctodo, text, todo_priority);

	fclose(file);
	return 0;
}
