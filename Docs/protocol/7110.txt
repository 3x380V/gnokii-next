7110.MSGTYPES version 28.01.2001
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Assembled by
Balazs Nagy (js@lsc.hu) and
Marcin Wiacek (Marcin-Wiacek@TOPNET.PL)
Help from
    Jens Bennfors <jens.bennfors@ing.hj.se>
    Michael Hund <michael@drhund.de>
    
This document covers the FBUS/IRDA and MBUS

NOTE: this information isn't (and can't be) complete.  If you know anything
about features not listed here or you noticed a bug in this list, please
notify us via e-mail.  Thank you.

 Message types for NSE-5 and NPE-3 (7110, 6210 and derivatives):
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Frame format for FBUS/IRDA:

    { FrameID, DestDEV, SrcDEV, MsgType, 0x00, FrameLength, {block},
      FramesToGo, SeqNo, PaddingByte?, ChkSum1, ChkSum2 }

         where FrameID:         0x1c: IR / FBUS
                                0x1e: Serial / FBUS
               DestDev, SrcDev: 0x00: mobile phone
                                0x0c: TE (FBUS) [eg. PC]
               MsgType:         see List
               FrameLength:     {block} + 2 (+ 1 if PaddingByte exists)
               FramesToGo:      0x01 means the last frame
               SeqNo:           [0xXY]
                                  X: 4: first block
                                     0: continuing block
                                  Y: sequence number
               PaddingByte:     0x00 if FrameLength would be an odd number
                                anyways it doesn't exists
               ChkSum1:         XOR on frame's odd numbers
               ChkSum2?:        XOR on frame's even numbers

 Frame format for MBUS:
 
    { FrameID, DestDEV, SrcDEV, MsgType, FrameLengthLO, FrameLengthHI, {block},
      SeqNo, ChkSum }

         where FrameID:         0x1f: Serial / M2BUS
               DestDev, SrcDev: 0x00: mobile phone
                                0x1d: TE (M2BUS)
                                0x10: TE (M2BUS)
               MsgType:         see List
               FrameLength:     {block}
               SeqNo:           sequence number
               ChkSum:          XOR on frame's all numbers

    Please note that M2BUS has only one checksum: XOR on frame[FrameID..SeqNo]

 List format:

    hex: Short description
       x msg desc                { ... }
        0xXX   -> one byte
        0xXXYY -> two bytes (== 0xXX, 0xYY)

         where hex:     message type
               x:       s=send (eg. to mobile), r=receive
               { ... }: data after 0x00, 0x01 header
               {+... }: raw data (without header)

 List:

0x01: Communication Status
    s Status request        { 0x0001, 0 0x20 0x01 0x46 }
    r External ring         { 0x0002, xx, 0x01 }
    r External hangon       { 0x0003, xx 5 0 1 3 2 0x91 0 1 }
    r Internal hangon       { 0x0007, xx 5 1 }
    r Internal hangup       { 0x0009, 6 0 0 0 1 }
    r Busy                  { 0x0054, 5 0x11 0 0 0 0 1 }
    r External hangup       { 0x0054, xx, 0x10 0 0 0 0 1 }
0x02: SMS handling
    s Send SMS message      { 0x0001, 0x02, 0x00 (SEND REQUEST), ... }
    r Message sent          { 0x0002 }
    r Send failed           { 0x0003, ?, ?, error (like in netmon in 65)}
    r SMS message received  { 0x0010, ...... } (whole message)
    s Set CellBroadcast     { 0x0020, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01 }
                                      for enable cell broadcast ?
                                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
                                      for disable cell broadcast ?
    r Set CellBroadcast OK  { 0x0021, 0x01 }
    r Read CellBroadcast    { 0x0023, ?, ?, ?, channel, ?, message... } ?
    s Set SMS center        { 0x0030, 0x64, priority, checksum?, format,
                                      validity[2], {DefaultRecipient no.}[12],
                                      {SMScenter no.}[12], {SMSC name}, 0x00}
                              where tel.no.[12]: {len, type, {number(BCD)}}
                                    type: 0x81: normal
                                          0x91: + (international)
                                          0xd0: alphanumeric
                                    format: 0x00: text
                                            0x22: fax
                                            0x24: voice
                                            0x25: ERMES
                                            0x26: paging
                                            0x31: X.400
                                            0x32: email
                                    validity: 0x000b:  1 hour
                                              0x0047:  6 hours
                                              0x00a7: 24 hours
                                              0x00a9: 72 hours
                                              0x00ad:  1 week
                                              0x00ff: max.time
    r Set SMS center OK     { 0x0031 }
    r Set SMS center error  { 0x0032, reason }
    s Get SMS center        { 0x0033, 0x64, priority }
    r SMS center received   { 0x0034, priority, checksum?, type,
                                      validity[2], {DefaultRecipient no.}[12],
                                      {SMScenter no.}[12], {SMSC name}, 0x00 }
                              where priority, checksum, type, validity,
                                    tel.no.[12]: see 0x02/0x0030
    r SMS center error recv { 0x0035, reason }
0x03: Phonebook functions
    s Get memory status     { 0x0103, xH, xL }
                            where x: memory type (see 0x03/0x107)
    r Get memory status     { 0x0104, 0x00, xL, 0x00[2], y1H, y1L, 0x10,
                                      0x00[2], z?, ymaxH, ymaxL, y2H, y2L,
                                      0x0d?, xH?, 0x00[2]? }
                              where y1: location (lowermost)
                                    y2: no. of locations
                                    ymax: maximum location no.
    s Read memory           { 0x0107, 0x01, 0x01, 0x00, 0x01, xH, xL,
                                     yH, yL, 0x00, 0x00}
                            where x: memory type (xH means nothing)
                                     0x01: (256) Dialled numbers
                                     0x02: (512) Missed calls
                                     0x03: (768) Received calls
                                     0x05: (500) telephone phonebook
                                     0x06: (160) SIM phonebook
                                     0x07: (10/0) voice tags?
                                     0x08: (1/0)
                                     0x09: (4) voice mailbox
                                     0x0e: (10) speed dials
                                     0x10: (5) caller groups
                                  y: location
    r Read memory           { 0x0108, 0x00, 0x01,
                             code,0x00, 0x00, z, xH, xL, yH, yL, 0x00, 0x00, 0x00, no.of blocks, { block } * }
                            where if code==0x0f && xH==0x34 - phonebook location not found
                              y: location
                              z: generic block size
                              block: {id, 0, 0, blocksize, block no.,
                                      {contents}, 0x00}
                                id: 0x04 pointer to another memory location { 0xff?, yH, yL, xL,0x00[3] }
                                    0x07 name {len, (unicode)},
                                    0x08 email
                                    0x09 postal
                                    0x0a note {len, (unicode)}
                                    0x0b number {type, 0x00[3], len, (unicode)}
                                    0x0c ringtone {ringtone no., 0, 0}
                                    0x13 date for a caled list (DC, RC, etc.) (contents???)
                                    0x1b caller group graphic {width, height, 0, 0 {bitmap}}
                                    0x1c caller group graphic on? {(1: yes, 0: no), 0, 0}
                                    0x1e caller group number {number, 0, 0}
                                   type: 0x0a: General,
                                         0x03: Mobile (office ?),
                                         0x06: Work,
                                         0x04: Fax,
                                         0x02: Home (mobile ?)
    s Set mem location      { 0x010b, 0x00, 0x01, 0x01, 0x00, 0x00, z,
                                      xH, xL, yH, yL, 0x00, 0x00, 0x00,
                                      no.of blocks, { block }[no.of blocks] }
    r Set mem location      { 0x010c, 0?, 1?, code, 0?, 0?, z?, 0?, 0?,
                                      yH, yL, xL }
                            where code:
                                    0x3d - wrong entry type
                                    0x3e - too much entries
0x0a: Network status
    s get used network      { 0x0070 }
    r get used network      { 0x0071, available,?,?,length,netstatus,netsel,cellIDH,
                                      cellIDL,lacH,lacL,MCC+MNC[3],{Opstr}, 4?,
                                      len, xlen(78), ylen(21), 0, {bitmap} }
                              where {Opstr}: namelen, {operator name(unicode)}
                                    len: {xlen, ylen, 0, {bitmap} + 2
                                    {bitmap}: bitmaplen, 0, 0, {OTA bitmap}
				    available: 0x02 if the logo following is valid,
				               0x01 for no operator logo following
    s get network status    { 0x0081 }
    r get network status    { 0x0082, network%, 0x14? }
    s set operator logo     { 0x01a3 0x01, oplogo?, MCC+MNC[3], 0?,4?,len,
                                     xlen(78),ylen(21), 0 (frames?),
                                     {bitmap}*?, 0x00(padding) }
                              where len, {bitmap}: see 0x0a/0x0071
    r set operator logo OK  { 0x01a4 }
0x13: Calendar notes
    s Add meeting note      { 0x0001, body like in subtype 0x001a...}
    r Add meeting note      { 0x0002, location (2 bytes), status (2 bytes)}
    s Add call note         { 0x0003, body like in subtype 0x001a...}
    r Add call note         { 0x0004, location (2 bytes), status (2 bytes)}
    s Add birthday note     { 0x0005, body like in subtype 0x001a...}
    r Add birthday note     { 0x0006, location (2 bytes), status (2 bytes)}
    s Add reminder note     { 0x0007, body like in subtype 0x001a...}
    r Add reminder note     { 0x0008, location (2 bytes), status (2 bytes)}
    s Delete calendar note  { 0x000b, location (2 bytes) }
    r Delete calendar note  { 0x000c, location (2 bytes), ?, ?, ?, ? }
    s Get calendar note     { 0x0019, location (2 bytes) }
    r Calendar note recvd   { 0x001a, location (2 bytes), entry type, 0x00, year (2 bytes), Month, Day, block}
                            where: entry type - 0x01 - Meeting, 0x02 - Call, 0x04 - Birthday, 0x08 - Reminder
                                   block: for Meeting:{hour,minute,alarm (two bytes),recurrance,len,0x00,string(unicode)}
                                          where alarm=Number of minutes before the time of the meeting
                                                  that the alarm should be triggered:
                                                  For meetings with "No alarm"=0xFFFF (-1).
                                                  For "On time"=0x0000
                                                  half an hour=0x001E, and so on.
                                                Recurrance=in hours, between future occurances of this meeting.
                                                  If there is no repeat, this value is 0x0000 
                                          for Call:{Hour,Minute,Alarm (as above),Recurrance (as above),namelen,numberlen,
                                                    name(unicode),number(unicode)}
                                          for Reminder:{Recurrance (as above),len,0x00,string(unicode)}
                                          for Birthday:{0x00,0x00,alarm(4 bytes),yearofbirth,alarmtype,len,string(unicode)}
                                          where alarm=32-bit integer that is the number of seconds between the desired
                                                  alarm time and 11:59:58pm on the birthday.For "No Alarm", the value is
                                                  0x0000FFFF (65535).
                                                YearOfBirth=used instead of the one in the common part of the entry (see above)
                                                  but only when reading birthday entries. For storing entries, this field does
                                                  not exist.
                                                AlarmType: 0x00 - Tone, 0x01 - Silent
    s Get first free pos    { 0x0031 }
    r Get first free pos    { 0x0032, location (2bytes) }
    s Get notes info        { 0x003a, 0xFF, 0xFE}
    r Get notes info        { 0x003b, how many notes used (2 bytes), 0x01, 0x07, { two bytes with location for each note} *}
0x14:
    s Get Picture Image     { 0x0007, location, number[2], 0x00, 0x64 }
    r Get Picture Image     { 0x0008, 0x07, location, number[2], 0x07, ??[38],
                                     width, height, lenH, lenL, {bitmap}}
    s Set Picture Image     { 0x0050, 0x07, location, number[2], 0x07, ??[38], 
                                     width, height, lenH, lenL, {bitmap}}
                              std. size: 72x28
    r Set Picture Image     { 0x0051, location, number[2], 0x07 }
    s List Picture Images   { 0x0096 location 0x0f 0x07 }
    r List Picture Images   { 0x0097 0x00 len {number[2]}[len] }
    s Get SMS from folder   { 0x0107, folderID, location(2 bytes), 0x01, 0x65, 0x01}
                            where: folderID - see 0x14/0x017B
    r Get SMS from folder   { 0x0108, 0x01/0x07(?), folderID, location(2 bytes),
                              0x00/0x01/0x02(read/unread/default?),sender number ?,...}
                            where: folderID - see 0x14/0x017B
    s Get folder status     { 0x016b, folderID, 0x0F, 0x01}
                            where: folderID - see 0x14/0x017B
    r Get folder status     { 0x016c, number of entries (2 bytes), entry1number (2 bytes), entry2number(2 bytes), ....}
    s Get folder names      { 0x017A, 0x00, 0x00}
    r Get folder names      { 0x017B, number of strings, folderID, name1, 0x00, folderID, name2, 0x00, name3, 0x00,...}
                            where: folderID=0x08 - Inbox
                                            0x10 - Outbox
                                            0x18 - Archive
                                            0x20 - Drafts
0x17:
    s Get Battery info      { 0x0002 }
    r Get Battery info      { 0x0003, 0x0b, batt%, 0x14?, 0x01? }
0x1b:
    s Get IMEI              { 0x0001 }
    r Get IMEI              { 0x0002, {IMEI(ASCII)}, 0x00 }
    s get HW&SW version     { 0x0003, 0x01, 0x32 }
    r get HW&SW version     { 0x0004, "V " "firmware\n" "firmware date\n"
                              "model\n" "(c) NMP." 0x00 0xff[14] }
0x1f:
    s ???                   { 0x0010 0x02 0x00 0xff 0xff }
    r ???                   { 0x0011 length 0x00 {block}[length] }
                              where block: { unicode letter[2], 0x0000,
                                0x00 0x55 ?? ?? }
    s Set ringtone          { 0x011f 0x00 location 0x00 {name(Unicode}},
                                     {ringtone} }
                              where ringtone: see 0x40/0x019e and 0x40/0x01a0
0x39:
    s ???                   { 0x0101, 0x04, 0x01, 0x01, 0xff, 0x03 }
    r ???                   { 0x0102, 1 2 3 1 1 1 0x85 }
0x40: Security commands
    s Enable extended cmds  { 0x0164, mode }
                            where mode: 0x00: off
                                        0x01: on
                                        0x03: soft reset
                                        0x04: hard reset
                                        0x06: CONTACT SERVICE MESSAGE!!! Don't try it!
    s Get IMEI              { 0x0166 }
    r Get IMEI              { 0x0166, 0x01, IMEI, 0x00}
    s Get Product Profile
      Settings              { 0x016a}
    r Get Product Profile
      Settings              { 0x016a, 4bytes with Product Profile Settings }
    s Set Product Profile
      Settings              { 0x016b, 4bytes with Product Profile Settings }
    r Set Product Profile
      Settings OK ?         { 0x016b }
    s Get code              { 0x016e, code }
                            where code: 1: security code (5 chars)
                                        2: PIN (4 chars)
                                        3: PIN2 (4 chars)
                                        4: PUK (8 chars)
                                        5: PUK2 (8 chars)
    r Get code              { 0x016e, code, allowed, allowed? (sec code (text)) }
                            where code: see 0x40/0x016e
                                  allowed: 0: no (in 6210 every code is denied)
                                           1: yes
    s Reset Permanent
      Counters (nm->test36) { 0x0174, 0x01, 0x01, 0x0e }
    r Reset Permanent
      Counters (nm->test36) { 0x0174 }
    s Netmonitor            { 0x017e, field }
                            where: field: 00: next
                                          F0: reset
                                          F1: off
                                          F2: field test menus
                                          F3: developer menus
    s get simlock info      { 0x018a, 0x00}
                            warning! it's possible, that using it in some phones
                            can close simlocks!
    r get simlock info      { 0x018a, 0x00, ... }
    s set downloaded opname { 0x018b, 0x00, mcc1, mcc2, mnc, name, 0x00 }
    r setdownloadedopnameok?{ 0x018b, 0x00, 0x01 }
    s get downloaded opname { 0x018c, 0x00 }
    r get downloaded opname { 0x018c, 0x00, 0x01, mcc1, mcc2, mnc, name, 0x00,...}
    s Buzzer pitch          { 0x018f, volume, hzLO, hzHI }
                            if volume and hz is 0, it's off
    r Buzzer pitch          { 0x018f }
    s Get bin ringtone      { 0x019e, location }
                            where: location=0,1,etc.
    r Get bin ringtone      { 0x019e, location, error, contents... }
                            where location=0,1,etc.
                                  error=0x0a, ringtone is NOT available
                                        0x00, OK
                           NOTE: it seems that it's available for backward
                                 compatibility only and it returns always that
                                 ringtone is NOT available
    s Set bin ringtone      { 0x01a0, location, 0x00, contenst... }
                            where: location=0,1,etc.
    r Set bin ringtone      { 0x019e, location, error }
                              where location=0,1,etc.
                                    error=0x0a, ringtone NOT set
                                          0x00, ringtone set OK
                           NOTE: it seems that it's available for backward
                                 compatibility only and it returns always that
                                 ringtone NOT set
    s Get HW                { 0x01c8, 0x05 }
    r Get HW                { 0x01c8, 0x05, 0x00, HW version (4 bytes), 0x00 }
    s Get "Made" Date       { 0x01c8, 0x05 }
    r Get "Made" Date       { 0x01c8, 0x05, 0x00, date(4 bytes), 0x00 }
    s Get DSP Internal SW   { 0x01c8, 0x09 }
    r Get DSP Internal SW   { 0x01c8, 0x09, 0x00, version (1 bytes), 0x00 }
    s Get PCI version       { 0x01c8, 0x0a }
    r Get PCI version       { 0x01c8, 0x0a, 0x00, version, 0x00 }
    s Get system ASIC       { 0x01c8, 0x0c }
    r Get system ASIC       { 0x01c8, 0x0c, 0x00, string, 0x00 }
    s Get COBBA             { 0x01c8, 0x0d }
    r Get COBBA             { 0x01c8, 0x0d, 0x00, string, 0x00 }
    s Get PLUSSA            { 0x01c8, 0x0e }
    r Get PLUSSA            { 0x01c8, 0x0e, available, 0x00 }
                            where available: 0x01: not available
    s Get CCONT             { 0x01c8, 0x0f }
    r Get CCONT             { 0x01c8, 0x0f, available, 0x00 }
                            where available: 0x01: not available
    s Get PPM version       { 0x01c8, 0x10 }
    r Get PPM version       { 0x01c8, 0x10, 0x00, "V ", "firmware", 0x0a, "firmware date", 0x0a, "model", 0x0a, "(c) NMP.", 0x00 }
    s Get PPM info          { 0x01c8, 0x12 }
    r Get PPM info          { 0x01c8, 0x12, 0x00, PPM version ("B", "C", etc.), 0x00 }
    s Set HW version        { 0x01c9, 0x05, version, 0x00 }
    s Get Product Code      { 0x01ca, 0x01 }
    r Get Product Code      { 0x01ca, 0x01, 0x00, number, 0x00 }
    s Get Order Number      { 0x01ca, 0x02 }
    r Get Order Number      { 0x01ca, 0x02, 0x00, string, 0x00 }
    s Get Prod.Ser.Number   { 0x01ca, 0x03 }
    r Get Prod.Ser.Number   { 0x01ca, 0x03, 0x00, number, 0x00 }
    s Get Basic Prod.Code   { 0x01ca, 0x04 }
    r Get Basic Prod.Code   { 0x01ca, 0x04, 0x00, number, 0x00 }
    s Set Product Code      { 0x01cb, 0x01, product code, 0x00 }
    s Set Order Number      { 0x01cb, 0x02, number, 0x00 }
    s Set Prod.Ser.Number   { 0x01cb, 0x03, number, 0x00 }
    s Get original IMEI     { 0x01cc, 0x01 }
    r Get original IMEI     { 0x01cc, 0x01, IMEI, 0x00 }
    s Get Manufacture Month { 0x01cc, 0x02 }
    r Get Manufacture Month { 0x01cc, 0x02, 0x00, string, 0x00 }
    s Get Purchare date     { 0x01cc, 0x04 }
    r Get Purchare date     { 0x01cc, 0x04, 0x00, string, 0x00 }
    s Set "Made" date       { 0x01cd, 0x02, string, 0x00 }
    s Result of phone tests { 0x01cf }
    r Result of phone tests { 0x01cf, 0xff, results of next tests }
0x78:
    s Status confirm        { 0x0201, 0x03 }
    r Incoming call seq1    { 0x0102 0x0e 0x03 }
    r Incoming call seq2    { 0x0102 0x7e 0x01 }
0x79:
    s CarKit enable         { 0x0201 0x01 0x62 0x00 }
    r CarKit enabled        { 0x0201 0x02 0x06 0x00 "V " {version} "\nHFU"
                                     0x00 }
0x7a:
    r Set startup logo      { 0x01eb, 0x15, 0x00 }
    s Set startup logo      { 0x01ec, 0x15, 0x0[4], 4, 0xc0, 2, 0, width,
                                      0xc0, 3, 0, height, 0xc0, 4, 3, 0,
                                      {bitmap}
                              width, height, {bitmap}: see 0x7a/0x01ee 0x15
    r Get startup logo      { 0x01ed, 0x15, 0x00 } ???
    s Get startup logo      { 0x01ee, 0x15 0x0[4], 0x04, 0xc0, 0x02, 0x00,
                                      width, 0xc0, 0x03, 0x00, height,
                                      0xc0, 0x04, 0x03, 0x00, {bitmap} }
                              where height: 60 (0x3c)
                                    width: 96 (0x60)
                                    {bitmap}: like other bitmaps but pixels
                                              placed vertically.
    s Get security code     { 0x01ed, 0x1c }
    r Get security code     { 0x01ee, 0x1c, 0x00, {code(ascii)}, 0x00 }
0x7f: Acknowledge(FBUS/IRDA){+type, seq }
      Acknowledge(MBUS)...
0xd0: 
    s Power on message seq1 {+04 }
    r Power on message seq1 {+05 }
0xd1:
    s Get HW&SW version     { 0x0003, 0x00 }
0xd2:
    r Get HW&SW version     { 0x0003 "V " "firmware\n" "firmware date\n"
                              "model\n" "(c) NMP." }
0xf4: Power on message seq 2
